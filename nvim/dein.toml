[[plugins]]
repo = 'Shougo/dein.vim'

#  [[plugins]]
#  repo = 'Shougo/vimproc.vim'
#  hook_post_update = '''
#    if dein#util#_is_windows()
#      let cmd = 'tools\\update-dll-mingw'
#    elseif dein#util#_is_cygwin()
#      let cmd = 'make -f make_cygwin.mak'
#    elseif executable('gmake')
#      let cmd = 'gmake'
#    else
#      let cmd = 'make'
#    endif
#    let g:dein#plugin.build = cmd
#  '''
#  
#  # View {{{
#  [[plugins]]
#  repo = 'itchyny/lightline.vim'
#  hook_add = '''
#    let g:lightline = {'colorscheme': 'solarized',
#        \ 'mode_map': {'c': 'NORMAL'},
#    \}
#  '''
#  #      \ 'active': {
#  #          \ 'left': [['mode', 'paste'], ['fugitive', 'filename', 'ale']]
#  #      \ },
#  
#  [[plugins]]
#  repo = 'tomasr/molokai'
#  hook_add = '''
#    let g:molokai_original = 1
#    autocmd myautocmd VimEnter * colorscheme molokai "TODO: transpansy
#  '''
#    #set background=dark
#  # }}} View
#  
#  
#  # Input {{{
#  ##[[plugins]]
#  ##repo = 'Shougo/neocomplete'
#  ##hook_add = '''
#  ##  let g:acp_enableAtStartup = 0
#  ##  let g:neocomplete#enable_at_startup = 1
#  ##  let g:neocomplete#max_list = 5
#  ##  let g:neocomplete#auto_completion_start_length = 3
#  ##  let g:neocomplete#enable_underbar_completion = 0
#  ##  let g:NeoComplete#EnableAtStartup = 1
#  ##'''
#  
#  [[plugins]]
#  repo = 'Shougo/neosnippet'
#  depends = ['neosnippet-snippets', 'vim-snippets']
#  hook_source = '''
#    imap <C-k> <Plug>(neosnippet_expand_or_jump)
#    smap <C-k> <Plug>(neosnippet_expand_or_jump)
#    xmap <C-k> <Plug>(neosnippet_expand_target)
#  
#    let g:neosnippet#snippets_directory = ['~/.config/nvim/snippets']
#    let g:neosnippet#snippets_directory+=['~/.cache/dein/repos/github.com/Shougo/neosnippet-snippets/neosnippets']
#    let g:neosnippet#snippets_directory+=['~/.cache/dein/repos/github.com/honza/vim-snippets/snippets']
#  '''
#  #
#  #  "smap <expr><TAB> neosnippet#expandable_or_jumpable()?
#  #  "  \ "\<Plug>(neosnippet_expand_or_jump)":"\<TAB>"
#  #
#  #  "let g:neosnippet#enable_snipmate_compatibility = 1
#  #  "" for reloading directory
#  #  "let g:neosnippet#disable_runtime_snippets = {'_' : 1}
#  #  let g:neosnippet#snippets_directory = ['~/.config/nvim/snippets']
#  #  let g:neosnippet#snippets_directory+=[g:dein_dir . '/repos/github.com/Shougo/neosnippet-snippets/neosnippets']
#  #  let g:neosnippet#snippets_directory+=[g:dein_dir . '/repos//github.com/honza/vim-snippets/snippets']
#  #
#  #  if has('conceal') " For snippet_complete marker.
#  #    set conceallevel=2 concealcursor=niv
#  #  endif
#  #'''
#  
#  [[plugins]]
#  repo = 'Shougo/neosnippet-snippets'
#  
#  [[plugins]]
#  repo = 'honza/vim-snippets'
#  
#  [[plugins]]
#  repo = 'tpope/vim-surround'
#  # }}} Input
#  
#  
#  # code check {{{
#  [[plugins]]
#  repo = 'w0rp/ale'
#  hook_add = '''
#    let g:ale_linters = {
#      "\ 'cpp': [],
#      \ 'python': ['pylint', 'flake8', 'mypy'],
#      \ 'haskell': []
#    \}
#    let g:ale_c_clang_options = '-std=c11 -Wall -Iinc -Iinclude'
#    let g:ale_c_gcc_options = '-std=c11 -Wall -Iinc -Iinclude'
#  
#    let g:ale_cpp_clang_options = '-std=c++14 -Wall -Iinc -Iinclude -Imockinc'
#    let g:ale_cpp_gcc_options = '-std=c++14 -Wall -Iinc -Iinclude -Imockinc'
#  
#    let g:ale_python_mypy_options = '-s'
#  
#    let g:ale_lint_on_enter = 0
#    let g:ale_lint_on_save = 1
#    let g:ale_lint_on_text_changed = 0
#    let g:ale_set_quickfix = 1    "for quickfix
#    let g:ale_open_list = 1   "for quickfix
#    nmap <silent> <C-k> <Plug>(ale_previous_wrap)
#    nmap <silent> <C-j> <Plug>(ale_next_wrap)
#  '''
#  
#  
#  # others {{{
#  # [[plugins]]
#  # repo = 'Shougo/unite.vim'
#  
#  
#  # [[plugins]]
#  # repo = 'fuenor/qfixhowm'
#  # hook_add = '''
#  #   let QFixHowm_key = 'g'
#  #   let howm_dir = '~/Dropbox/memo/howm'
#  #   let howm_filename      = '%Y/%m/%Y-%m-%d-%H%M%S.howm'
#  #   let howm_fileencoding  = 'utf-8'
#  #   let howm_fileformat    = 'unix'
#  #   let QFixHowm_DiaryFile = 'diary/%Y/%m/%Y-%m-%d-000000.howm'
#  # '''
#  
#  [[plugins]]
#  repo = 'Shougo/deoplete.nvim'
#  if = 'has("nvim")'
#  on_event = 'InsertcharPre'
#  hook_source = '''
#    let g:deoplete#enable_at_startup = 1
#    let g:deoplete#max_list = 5
#    let g:deoplete#auto_complete_start_length = 3
#    "let g:deoplete#enable_camel_case = 0
#    "let g:deoplete#enable_ignore_case = 0
#    "let g:deoplete#enable_refresh_always = 0
#    "let g:deoplete#enable_smart_case = 1
#    "let g:deoplete#file#enable_buffer_path = 1
#    inoremap <expr><tab> pumvisible() ? "\<C-n>" :
#      \  neosnippet#expandable_or_jumpable() ?
#      \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
#  '''
#  hook_post_source = '''
#    let g:deoplete#omni_patterns = {}
#  '''
#  
#  [[plugins]]
#  repo = 'zchee/deoplete-jedi'
#  if = 'has("nvim")'
#  depends = 'deoplete.vim'
#  
#  
#  [[plugins]]
#  repo = 'Shougo/neomru.vim'
#  
#  [[plugins]]
#  repo = 'Shougo/denite.nvim'
#  if = 'has("nvim")'
#  depends = 'neomru.nvim'
#  
#  # [[plugins]]
#  # repo = 'Yggdroot/indentLine'
#  # hook_source = '''
#  # let g:indentLine_char = ''
#  # '''
#  # let g:indentLine_color_term = 111
#  # let g:indentLine_color_gui = '#909090'
#  
#  # }}} others
